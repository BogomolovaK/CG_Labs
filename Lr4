from math import cos, sqrt
from math import sin
import math as math
import numpy as np
from random import randint
from PIL import Image, ImageOps

def bary(x0, y0, x1, y1, x2, y2, x, y):
    l0 = ((x - x2) * (y1 - y2) - (x1 - x2)*(y - y2)) / ((x0 - x2) * (y1 - y2) - (x1 - x2) * (y0 - y2))
    l1 = ((x0 - x2) * (y - y2) - (x - x2) * (y0 -y2)) / ((x0 - x2) * (y1 - y2) - (x1 - x2) * (y0 - y2))
    l2 = 1.0 - l0 - l1
    return l0, l1, l2

def normal(x0, y0, z0, x1, y1, z1, x2, y2, z2):
    normal = np.cross ([x1 - x2, y1 - y2, z1 - z2], [x1-x0, y1-y0, z1-z0])
    return normal

def find_light(x0, y0, z0, x1, y1, z1, x2, y2, z2):
    l = [0, 0, 1]
    n = normal(x0, y0, z0, x1, y1, z1, x2, y2, z2)
    norm_n = np.linalg.norm(n)
    norm_l = np.linalg.norm(l)
    cos_light = (np.dot(n, l)) / (norm_n * norm_l)
    return cos_light

def find_light_for_each(n):
    l = [0, 0, 1]
    norm_n = np.linalg.norm(n)
    norm_l = np.linalg.norm(l)
    cos_light = (np.dot(n, l)) / (norm_n * norm_l)
    return cos_light


def draw_tr (image, x0, y0, z0, x1, y1, z1, x2, y2, z2, n1, n2, n3, image_t, u0, v0, u1, v1, u2, v2):

    x0_p = a*x0/z0 + img_sizea/2
    y0_p = a*y0/z0 + img_sizeb/2

    x1_p = a*x1/z1 + img_sizea/2
    y1_p = a*y1/z1 + img_sizeb/2

    x2_p = a*x2/z2 + img_sizea/2
    y2_p = a*y2/z2 + img_sizeb/2
    
    xmin = int(np.floor(max(min(x0_p, x1_p, x2_p), 0)))
    ymin = int(np.floor(max(min(y0_p, y1_p, y2_p), 0)))

    xmax = int(np.ceil(min(max(x0_p, x1_p, x2_p), img_sizea)))
    ymax = int(np.ceil(min(max(y0_p, y1_p, y2_p), img_sizeb)))

    light = find_light(x0, y0, z0, x1, y1, z1, x2, y2, z2)
    if (light == 0):
        return
    color = [0, -203*light, -254*light]

    for x in range (xmin, xmax):
        for y in range (ymin, ymax):
            l0, l1, l2 = bary(x0_p, y0_p, x1_p, y1_p, x2_p, y2_p, x, y)
            i0 = find_light_for_each (n1)
            i1 = find_light_for_each (n2)
            i2 = find_light_for_each (n3)
            I = (l0*i0+l1*i1+l2*i2)
            if (I < 0):
                #color = [0, -203*I, -254*I]
                if (l0 >= 0 and l1 >= 0 and l2 >= 0):
                    z = l0*z0 + l1*z1 + l2*z2
                    if z < z_buffer[x, y]:
                        image[x, y] = image_t[round(1024*(l0*u0+l1*u1+l2*u2)), round(1024*(l0*v0+l1*v1+l2*v2))]* -I
                        z_buffer[x, y] = z

def row(x, y, z, a, b, u):
    n = [x, y, z]
    rx = [[1, 0, 0], [0, cos(a), sin(a)], [0, -sin(a), cos(a)]]
    ry = [[cos(b), 0, sin(b)], [0, 1, 0], [-sin(b), 0, cos(b)]]
    rz = [[cos(u), sin(u), 0], [-sin(u), cos(u), 0], [0, 0, 1]]
    temp = np.matmul(rx, ry)
    temp = np.matmul(temp, rz)
    temp = np.matmul(temp, n)
    x1 = temp[0] 
    y1 = temp[1] 
    z1 = temp[2] + 1
    return x1, y1, z1
        
def quaternion_mul(q1, q2):
    w1, x1, y1, z1 = q1
    w2, x2, y2, z2 = q2
    w = w1 * w2 - x1 * x2 - y1 * y2 - z1 * z2
    x = w1 * x2 + x1 * w2 + y1 * z2 - z1 * y2
    y = w1 * y2 - x1 * z2 + y1 * w2 + z1 * x2
    z = w1 * z2 + x1 * y2 - y1 * x2 + z1 * w2
    return np.array([w, x, y, z])

def quaternion_conjugate(q):
    return np.array([q[0], -q[1], -q[2], -q[3]])

def quaternion_rotate_vector(q, x, y, z):
    v_quat = np.array([0, x, y, z])
    q_conj = [q[0], -q[1], -q[2], -q[3]]
    temp = quaternion_mul(q, v_quat)
    rotated = quaternion_mul(temp, q_conj)
    return rotated[1:]


def euler_to_quaternion(a, b, u):
    cr = cos(a * 0.5)
    sr = sin(a * 0.5)

    cp = cos(b* 0.5)
    sp = sin(b * 0.5)

    cy = cos(u * 0.5)
    sy = sin(u * 0.5)

    w = cr * cp * cy + sr * cp * sy
    x = sr * cp * cy - cr * sp * sy
    y = cr * sp * cy + sr * cp * sy
    z = cr * cp * sy - sr * sp * cy

    return np.array([w, x, y, z])

def rotate_with_quaternion(x, y, z, ang_a, ang_b, ang_u):
    q = euler_to_quaternion(ang_a, ang_b, ang_u)
    rotated_point = quaternion_rotate_vector(q, x, y, z)
    return rotated_point[0], rotated_point[1], rotated_point[2] + 1

a = 10000
img_sizea = 1500
img_sizeb = 1500

ang_a = 60
ang_b = 0
ang_u = 0
dop_turn = 0

img_mat = np.zeros((img_sizea, img_sizeb, 3), dtype = np.uint8)
z_buffer = np.zeros((img_sizea, img_sizeb), dtype = np.float32)
z_buffer[:] = np.inf


for rep in range (1):
    obj_file = open('model_1.obj')
    tec_file = Image.open('bunny-atlas.jpg')
    tec_file = np.rot90(tec_file, k=1, axes=(1, 0))
    image_t = np.array(tec_file)
    v = []
    f = []
    vt = []
    vc = []
    dop_turn = dop_turn + 30
    for line in obj_file:
        s = line.split()
        if len(s) == 0:
            continue
        if (s[0] == 'v'): v.append([float(s[1]), float(s[2]), float(s[3])])
        if (s[0] == 'vt'): vt.append([float(s[1]), float(s[2])])
        if (s[0] == 'f'): 
            
            if (len(s)==4):
                f.append([int(s[1].split('/')[0]),int( s[2].split('/')[0]), int(s[3].split('/')[0])])
                vc.append([int(s[1].split('/')[1]),int( s[2].split('/')[1]), int(s[3].split('/')[1])])
            
            if (len(s)>4):
                for i in range(2, len(s)-1):
                    f.append([int(s[1].split('/')[0]),int( s[i].split('/')[0]), int(s[i+1].split('/')[0])])
                    vc.append([int(s[1].split('/')[1]),int( s[i].split('/')[1]), int(s[i+1].split('/')[1])])

    for i in range(len (v)):
        #v[i][0], v[i][1], v[i][2] = row (v[i][0], v[i][1], v[i][2], ang_a + dop_turn, ang_b + 30, ang_u)
        v[i][0], v[i][1], v[i][2] = rotate_with_quaternion (v[i][0], v[i][1], v[i][2], ang_a + dop_turn, ang_b + 30, ang_u)

    vn_calc = np.zeros((len (v), 3))

    for i in range(len (f)):

        x0 = (v[f[i][0]-1][0])
        y0 = (v[f[i][0]-1][1])
        z0 = (v[f[i][0]-1][2])

        x1 = (v[f[i][1]-1][0])
        y1 = (v[f[i][1]-1][1])
        z1 = (v[f[i][1]-1][2])

        x2 = (v[f[i][2]-1][0])
        y2 = (v[f[i][2]-1][1])
        z2 = (v[f[i][2]-1][2])

        n = normal(x0, y0, z0, x1, y1, z1, x2, y2, z2)
        vn_calc[f[i][0]-1] = vn_calc[f[i][0]-1] + n
        vn_calc[f[i][1]-1] = vn_calc[f[i][1]-1] + n
        vn_calc[f[i][2]-1] = vn_calc[f[i][2]-1] + n
        

    for i in range(len(f)):
    
        x0 = (v[f[i][0]-1][0])
        y0 = (v[f[i][0]-1][1])
        z0 = (v[f[i][0]-1][2])
        u0 = (vt[vc[i][0]-1][0])
        v0 = (vt[vc[i][0]-1][1])

        x1 = (v[f[i][1]-1][0])
        y1 = (v[f[i][1]-1][1])
        z1 = (v[f[i][1]-1][2])
        u1 = (vt[vc[i][1]-1][0])
        v1 = (vt[vc[i][1]-1][1])

        x2 = (v[f[i][2]-1][0])
        y2 = (v[f[i][2]-1][1])
        z2 = (v[f[i][2]-1][2])
        u2 = (vt[vc[i][2]-1][0])
        v2 = (vt[vc[i][2]-1][1])

        n1 = vn_calc[f[i][0]-1]
        n2 = vn_calc[f[i][1]-1]
        n3 = vn_calc[f[i][2]-1]

        draw_tr (img_mat, x0, y0, z0, x1, y1, z1, x2, y2, z2, n1, n2, n3, image_t, u0, v0, u1, v1, u2, v2)
        print(f"Обработано {i}/{len(f)} треугольников")

img = Image.fromarray(img_mat, mode = 'RGB')
img.save('try127.png')